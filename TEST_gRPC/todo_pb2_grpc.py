# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import todo_pb2 as todo__pb2


class FedMLStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getWeight = channel.unary_stream(
                '/todoPackage.FedML/getWeight',
                request_serializer=todo__pb2.void.SerializeToString,
                response_deserializer=todo__pb2.modelWeight.FromString,
                )
        self.sendWeight = channel.stream_unary(
                '/todoPackage.FedML/sendWeight',
                request_serializer=todo__pb2.modelWeight.SerializeToString,
                response_deserializer=todo__pb2.myResponse.FromString,
                )
        self.reCheck = channel.unary_unary(
                '/todoPackage.FedML/reCheck',
                request_serializer=todo__pb2.void.SerializeToString,
                response_deserializer=todo__pb2.myResponse.FromString,
                )


class FedMLServicer(object):
    """Missing associated documentation comment in .proto file"""

    def getWeight(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendWeight(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reCheck(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FedMLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getWeight': grpc.unary_stream_rpc_method_handler(
                    servicer.getWeight,
                    request_deserializer=todo__pb2.void.FromString,
                    response_serializer=todo__pb2.modelWeight.SerializeToString,
            ),
            'sendWeight': grpc.stream_unary_rpc_method_handler(
                    servicer.sendWeight,
                    request_deserializer=todo__pb2.modelWeight.FromString,
                    response_serializer=todo__pb2.myResponse.SerializeToString,
            ),
            'reCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.reCheck,
                    request_deserializer=todo__pb2.void.FromString,
                    response_serializer=todo__pb2.myResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'todoPackage.FedML', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FedML(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def getWeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/todoPackage.FedML/getWeight',
            todo__pb2.void.SerializeToString,
            todo__pb2.modelWeight.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendWeight(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/todoPackage.FedML/sendWeight',
            todo__pb2.modelWeight.SerializeToString,
            todo__pb2.myResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/todoPackage.FedML/reCheck',
            todo__pb2.void.SerializeToString,
            todo__pb2.myResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
